// Generated by CoffeeScript 1.9.2
var ReadVue, async, config, exchangeService;

config = require('../config');

ReadVue = require('./../vue/read_vue');

exchangeService = require('./../service/exchange_service');

async = require('async');

module.exports = function() {
  if (!window.oceanContext.userInfo.login) {
    window.location = config.siteAddress + '/#/login';
    return;
  }
  return async.waterfall([
    function(flowCallBack) {
      var rowDes;
      rowDes = {
        limit: 1,
        sort: {
          createTime: -1
        }
      };
      return exchangeService.queryDiary(null, null, rowDes, function(err, records) {
        var diary;
        if ((records != null) && (records[0] != null)) {
          diary = records[0];
          window.recentDiaryDate = diary.date;
          diary.pass = null;
        } else {
          diary = {
            _id: null,
            date: null,
            content: '',
            pass: null,
            passCheck: null
          };
        }
        return flowCallBack(err, diary);
      });
    }, function(diary, flowCallBack) {
      var rowDes;
      rowDes = {
        limit: 1,
        sort: {
          createTime: 1
        }
      };
      return exchangeService.queryDiary(null, 'date', rowDes, function(err, records) {
        if ((records != null) && (records[0] != null)) {
          window.earliestDiaryDate = records[0].date;
        }
        return flowCallBack(err, diary);
      });
    }
  ], function(err, diary) {
    if ((err != null)) {
      return alert(err.errorMessage);
    } else {
      return new ReadVue({
        el: config.domIds.main,
        data: diary
      });
    }
  });
};
